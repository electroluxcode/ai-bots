# 修复说明

为了解决 node-tasks 包的编译问题和重构工作流调用方式，我们进行了以下修复：

## TypeScript 配置修复

1. 替换了 `tsconfig.json` 文件，移除了对项目根目录 `tsconfig.json` 的引用
2. 更新了编译器选项：
   - 将 `target` 设置为 `ES2020`
   - 添加了 `lib: ["ES2020", "DOM"]` 以支持现代 JavaScript 功能
   - 启用了 `skipLibCheck` 以避免第三方库的类型检查问题
   - 配置了 `esModuleInterop` 以便更好地处理 CommonJS 模块

## 依赖修复

1. 移除了对 `@types/node-cron` 的依赖，因为它与当前环境不兼容
2. 添加了 `@types/node` 依赖，提供一般的 Node.js 类型支持
3. 修正了 `package.json` 中的 `dev` 脚本指向 `src/index.ts`

## 代码修复

1. 修复了 `timers/promises` 导入问题：
   - 创建了自定义的 `sleep` 函数来替代 Node.js 的 `setTimeout` Promise 版本

2. 修复了 `node-cron` 导入和类型问题：
   - 使用 `require()` 方式导入 `node-cron`
   - 创建了自定义类型定义 `CronModule` 和 `CronScheduledTask`
   - 简化了计算下一次运行时间的逻辑，避免使用 `getTasks()` 方法

## 重构工作流调用方式

1. 移除了复杂的映射设计：
   - 删除了 `processInput` 和 `processOutput` 方法中的映射逻辑
   - 直接将输入数据传递给 `executeFlow` 函数
   - 简化了 TaskExecutor 类的实现

2. 添加了直接使用 node-workflow 的方法：
   - 在 index.ts 中重新导出了 `executeFlow` 函数
   - 添加了简化的 `executeWorkflow` 函数，与 apps/mvp/src/index.ts 使用的方式一致
   - 在 TaskManager 中添加了 `executeSingleWorkflow` 方法，提供直接执行工作流的功能

3. 更新了 TaskNodeExecutor 类：
   - 简化了 executeWorkflows 方法，直接使用 executeFlow 执行工作流
   - 移除了输入验证中对 task_input 的依赖

## 使用示例

### 直接执行工作流

```typescript
import { executeFlow, executeWorkflow } from '@ai-bots/node-tasks';
import * as fs from 'fs';
import * as path from 'path';

// 方法 1: 使用重新导出的 executeFlow
const flowFilePath = path.join(process.cwd(), 'flow.json');
const flowDefinition = JSON.parse(fs.readFileSync(flowFilePath, 'utf-8'));
const input = { key: 'value' };

executeFlow(flowDefinition, input)
  .then(result => console.log('Flow result:', result))
  .catch(error => console.error('Flow error:', error));

// 方法 2: 使用简化的 executeWorkflow 包装函数
executeWorkflow(flowDefinition, input)
  .then(result => console.log('Workflow result:', result))
  .catch(error => console.error('Workflow error:', error));
```

### 使用 TaskManager 执行工作流

```typescript
import { TaskManager } from '@ai-bots/node-tasks';
import * as fs from 'fs';
import * as path from 'path';

const flowFilePath = path.join(process.cwd(), 'flow.json');
const flowDefinition = JSON.parse(fs.readFileSync(flowFilePath, 'utf-8'));
const input = { key: 'value' };

// 使用 TaskManager 的 executeSingleWorkflow 方法
const taskManager = new TaskManager([], 'serial');
taskManager.executeSingleWorkflow(flowDefinition, input)
  .then(result => console.log('Task result:', result))
  .catch(error => console.error('Task error:', error));
```

这些修复和重构应该解决了编译错误，并简化了工作流调用方式，使其与 apps/mvp/src/index.ts 的风格一致。 